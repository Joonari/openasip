/** 
 * @file MoveNodeUse.icc
 *
 * Implementation of MoveNodeUse class.
 *
 * Wrapper class that contains data dependence information related to one
 * data dependence induced by a MoveNode. 
 *
 * Multiple MoveNodeUse objects can point to a single movenode.
 * @author Heikki Kultala 2008 (hkultala@cs.tut.fi)
 * @note rating: red
 */


/**
 * Comparison operator to be used when storing to maps and sets.
 * @param other other MoveNodeUse to compare to.
 */
bool MoveNodeUse::operator< (const MoveNodeUse& other) const {
    if (mn_ == NULL) {
        return false;
    } else {
        if (other.mn_ == NULL) {
            return true;
        }
    }
    if (mn_->nodeID() < other.mn_->nodeID()) return true;
    if (mn_->nodeID() > other.mn_->nodeID()) return false;

    if (guard_ < other.guard_) return true;
    if (guard_ > other.guard_) return false;
    
    if (ra_ < other.ra_) return true;
    if (ra_ > other.ra_) return false;
    
    if (pseudo_ < other.pseudo_) return true;
    if (pseudo_ > other.pseudo_) return false;

    // LOOP property ignored in this comparison - do not put same
    // movenode twice, with both loop and no loop property.
    // the order these are inserted into sets should take care the
    // one without loop is priorized first.
    
    return false;
}

/** 
 * Constructor.
 * Copies from another movenodeuse, but may set loop property to true
 * if a parameter given.
 *
 * @param mnu MoveNodeUse to copy.
 * @param setLoopProperty whether to set loop property true for the copy.
 */
MoveNodeUse::MoveNodeUse(const MoveNodeUse& mnu, BBRelation newBBRelation ) :
    mn_(mnu.mn_), guard_(mnu.guard_), ra_(mnu.ra_), pseudo_(mnu.pseudo_), 
    bbRelation_((BBRelation)(mnu.bbRelation_ | newBBRelation)) {
}
