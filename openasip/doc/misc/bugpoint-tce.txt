Bugpoint of LLVM can be used to track LLVM optimizations 
that produce miscompiled TTA programs. It requires that 
the program compiles successfully without optimizations 
but when some LLVM optimization is applied, the result 
gets broken.

I have implemented and submitted to mainline two new switches 
to the Bugpoint tool: -run-custom,
which instructs the Bugpoint to "run" the generated
bitcodes with an custom command that can be defined
with the added '-exec-command' switch.

For this to work with TCE, I wrote script 'tce-exec-bc' 
that "executes" LLVM bytecodes by first scheduling it to 
a target and then running ttasim with the resulting
TPEF.

For example, here is how I tried to track a LLVM 2.2
miscompilation bug with DSPstone/adpcm:

1) Generate a bytecode that works correctly with -O0, but not with -O3:

   tcecc src/board_test.c -O0 -o adpcm.bc

2) Create a script for executing the bytecode and to produce validation
   output:

   cat > run_bytecode
   #!/bin/sh
   tce-exec-bc -e "run; puts [x /u h /n 32 _Input]; quit;"  \
               1_bus_full_connectivity.adf $1
   ^D
   chmod +x run_bytecode

   The script given with '-e' is fed to ttasim and executed after it has 
   loaded the machine and the scheduled tpef. It is used to produce output for
   verification. Do not forget to add the interpreter line (the first one) as
   it doesn't seem to work without.
 
   I could have used also printf() in the C code to print out verification
   output, but it slows down compilation quite a lot so I decided to 
   generate the verification data using ttasim instead.

   If you have verification data printed out to STDOUT and you can run
   the simulation to completion, the following run_bytecode script content
   suffices:

   #!/bin/sh
   tce-exec-bc machine.adf $1

3) Generate reference output from a valid run of the unoptimized
   program:

   ./run_bytecode adpcm.bc > reference.txt

4) Start Bugpoint.

   bugpoint adpcm.bc -run-custom \
            -exec-command=$PWD/run_bytecode \
            -output=reference.txt \
            -O3 adpcm.bc

   You should replace -O3 with the set of optimization
   switches that break the compile. For example, the switches from the
   command 

   opt --debug-pass=Arguments --std-compile-opts foo.bc   

   This instructs Bugpoint to do a binary search on the optimization
   passes to find the pass the produces the broken end result, hopefully
   reducing the list of passes to a single one.

Pitfalls
--------

* The execution that should succeed doesn't.

  Bugpoint leaves the produced output to a bugpoint-execution-output* file.
  Check the contents of the one with the latest time stamp to see what goes
  wrong.

* Out of memory issues when executing the custom exec command via bugpoint.

  bugpoint sets up a memory limit for the executed custom commands and is 
  300MB by default. This is usually not enough for tcecc and ttasim executed
  by the exec-command. If out of memory issues happen, increase this by 
  adding -mlimit=4096 to the above command line.

* Missing 'memset' or similar when running the bugpoint optimized bitcode.

  This happens because the bugpoint might optimize away the memset function
  in the original bitcode. Force relinking the bitcode libs by adding
  --force-link to the tcecc command line in the run_bytecode script.
