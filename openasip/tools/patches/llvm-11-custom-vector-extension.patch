diff --git llvm/include/llvm/CodeGen/ValueTypes.td llvm/include/llvm/CodeGen/ValueTypes.td
index c5eb87cf1d3..2d0fa5df8c0 100644
--- llvm/include/llvm/CodeGen/ValueTypes.td
+++ llvm/include/llvm/CodeGen/ValueTypes.td
@@ -45,149 +45,154 @@ def v128i1 : ValueType<128, 22>;   // 128 x i1 vector value
 def v256i1 : ValueType<256, 23>;   // 256 x i1 vector value
 def v512i1 : ValueType<512, 24>;   // 512 x i1 vector value
 def v1024i1: ValueType<1024,25>;   //1024 x i1 vector value
-
-def v1i8   : ValueType<8,   26>;   //  1 x i8  vector value
-def v2i8   : ValueType<16 , 27>;   //  2 x i8  vector value
-def v4i8   : ValueType<32 , 28>;   //  4 x i8  vector value
-def v8i8   : ValueType<64 , 29>;   //  8 x i8  vector value
-def v16i8  : ValueType<128, 30>;   // 16 x i8  vector value
-def v32i8  : ValueType<256, 31>;   // 32 x i8  vector value
-def v64i8  : ValueType<512, 32>;   // 64 x i8  vector value
-def v128i8 : ValueType<1024,33>;   //128 x i8  vector value
-def v256i8 : ValueType<2048,34>;   //256 x i8  vector value
-
-def v1i16  : ValueType<16 , 35>;   //  1 x i16 vector value
-def v2i16  : ValueType<32 , 36>;   //  2 x i16 vector value
-def v3i16  : ValueType<48 , 37>;   //  3 x i16 vector value
-def v4i16  : ValueType<64 , 38>;   //  4 x i16 vector value
-def v8i16  : ValueType<128, 39>;   //  8 x i16 vector value
-def v16i16 : ValueType<256, 40>;   // 16 x i16 vector value
-def v32i16 : ValueType<512, 41>;   // 32 x i16 vector value
-def v64i16 : ValueType<1024,42>;   // 64 x i16 vector value
-def v128i16: ValueType<2048,43>;   //128 x i16 vector value
-
-def v1i32    : ValueType<32 , 44>;   //  1 x i32 vector value
-def v2i32    : ValueType<64 , 45>;   //  2 x i32 vector value
-def v3i32    : ValueType<96 , 46>;   //  3 x i32 vector value
-def v4i32    : ValueType<128, 47>;   //  4 x i32 vector value
-def v5i32    : ValueType<160, 48>;   //  5 x i32 vector value
-def v8i32    : ValueType<256, 49>;   //  8 x i32 vector value
-def v16i32   : ValueType<512, 50>;   // 16 x i32 vector value
-def v32i32   : ValueType<1024,51>;   // 32 x i32 vector value
-def v64i32   : ValueType<2048,52>;   // 64 x i32 vector value
-def v128i32  : ValueType<4096,53>;   // 128 x i32 vector value
-def v256i32  : ValueType<8182,54>;   // 256 x i32 vector value
-def v512i32  : ValueType<16384,55>;  // 512 x i32 vector value
-def v1024i32 : ValueType<32768,56>;  // 1024 x i32 vector value
-def v2048i32 : ValueType<65536,57>;  // 2048 x i32 vector value
-
-def v1i64  : ValueType<64 , 58>;   //  1 x i64 vector value
-def v2i64  : ValueType<128, 59>;   //  2 x i64 vector value
-def v4i64  : ValueType<256, 60>;   //  4 x i64 vector value
-def v8i64  : ValueType<512, 61>;   //  8 x i64 vector value
-def v16i64 : ValueType<1024,62>;   // 16 x i64 vector value
-def v32i64 : ValueType<2048,63>;   // 32 x i64 vector value
-
-def v1i128 : ValueType<128, 64>;   //  1 x i128 vector value
-
-def v2f16    : ValueType<32 , 65>;    //    2 x f16 vector value
-def v3f16    : ValueType<48 , 66>;    //    3 x f16 vector value
-def v4f16    : ValueType<64 , 67>;    //    4 x f16 vector value
-def v8f16    : ValueType<128, 68>;    //    8 x f16 vector value
-def v16f16   : ValueType<256, 69>;    //   16 x f16 vector value
-def v32f16   : ValueType<512, 70>;    //   32 x f16 vector value
-def v64f16   : ValueType<1024, 71>;   //   64 x f16 vector value
-def v128f16  : ValueType<2048, 72>;   //  128 x f16 vector value
-def v2bf16   : ValueType<32 , 73>;    //    2 x bf16 vector value
-def v3bf16   : ValueType<48 , 74>;    //    3 x bf16 vector value
-def v4bf16   : ValueType<64 , 75>;    //    4 x bf16 vector value
-def v8bf16   : ValueType<128, 76>;    //    8 x bf16 vector value
-def v16bf16  : ValueType<256, 77>;    //   16 x bf16 vector value
-def v32bf16  : ValueType<512, 78>;    //   32 x bf16 vector value
-def v64bf16  : ValueType<1024, 79>;   //   64 x bf16 vector value
-def v128bf16 : ValueType<2048, 80>;   //  128 x bf16 vector value
-def v1f32    : ValueType<32 , 81>;    //    1 x f32 vector value
-def v2f32    : ValueType<64 , 82>;    //    2 x f32 vector value
-def v3f32    : ValueType<96 , 83>;    //    3 x f32 vector value
-def v4f32    : ValueType<128, 84>;    //    4 x f32 vector value
-def v5f32    : ValueType<160, 85>;    //    5 x f32 vector value
-def v8f32    : ValueType<256, 86>;    //    8 x f32 vector value
-def v16f32   : ValueType<512,  87>;   //   16 x f32 vector value
-def v32f32   : ValueType<1024, 88>;   //   32 x f32 vector value
-def v64f32   : ValueType<2048, 89>;   //   64 x f32 vector value
-def v128f32  : ValueType<4096, 90>;   //  128 x f32 vector value
-def v256f32  : ValueType<8182, 91>;   //  256 x f32 vector value
-def v512f32  : ValueType<16384, 92>;  //  512 x f32 vector value
-def v1024f32 : ValueType<32768, 93>;  // 1024 x f32 vector value
-def v2048f32 : ValueType<65536, 94>;  // 2048 x f32 vector value
-def v1f64    : ValueType<64, 95>;     //    1 x f64 vector value
-def v2f64    : ValueType<128, 96>;    //    2 x f64 vector value
-def v4f64    : ValueType<256, 97>;    //    4 x f64 vector value
-def v8f64    : ValueType<512, 98>;    //    8 x f64 vector value
-def v16f64   : ValueType<1024, 99>;   //   16 x f64 vector value
-def v32f64   : ValueType<2048, 100>;  //   32 x f64 vector value
-
-def nxv1i1  : ValueType<1,  101>;  // n x  1 x i1  vector value
-def nxv2i1  : ValueType<2,  102>;  // n x  2 x i1  vector value
-def nxv4i1  : ValueType<4,  103>;  // n x  4 x i1  vector value
-def nxv8i1  : ValueType<8,  104>;  // n x  8 x i1  vector value
-def nxv16i1 : ValueType<16, 105>;  // n x 16 x i1  vector value
-def nxv32i1 : ValueType<32, 106>;  // n x 32 x i1  vector value
-def nxv64i1  : ValueType<64,107>;  // n x  64 x i1  vector value
-
-def nxv1i8  : ValueType<8,   108>;  // n x  1 x i8  vector value
-def nxv2i8  : ValueType<16,  109>;  // n x  2 x i8  vector value
-def nxv4i8  : ValueType<32,  110>;  // n x  4 x i8  vector value
-def nxv8i8  : ValueType<64,  111>;  // n x  8 x i8  vector value
-def nxv16i8 : ValueType<128, 112>;  // n x 16 x i8  vector value
-def nxv32i8 : ValueType<256, 113>;  // n x 32 x i8  vector value
-def nxv64i8  : ValueType<512,  114>;  // n x  64 x i8  vector value
-
-def nxv1i16 : ValueType<16,  115>; // n x  1 x i16 vector value
-def nxv2i16 : ValueType<32,  116>; // n x  2 x i16 vector value
-def nxv4i16 : ValueType<64,  117>; // n x  4 x i16 vector value
-def nxv8i16 : ValueType<128, 118>; // n x  8 x i16 vector value
-def nxv16i16: ValueType<256, 119>; // n x 16 x i16 vector value
-def nxv32i16: ValueType<512, 120>; // n x 32 x i16 vector value
-
-def nxv1i32 : ValueType<32,  121>; // n x  1 x i32 vector value
-def nxv2i32 : ValueType<64,  122>; // n x  2 x i32 vector value
-def nxv4i32 : ValueType<128, 123>; // n x  4 x i32 vector value
-def nxv8i32 : ValueType<256, 124>; // n x  8 x i32 vector value
-def nxv16i32: ValueType<512, 125>; // n x 16 x i32 vector value
-def nxv32i32: ValueType<1024,126>; // n x 32 x i32 vector value
-
-def nxv1i64 : ValueType<64,  127>; // n x  1 x i64 vector value
-def nxv2i64 : ValueType<128, 128>; // n x  2 x i64 vector value
-def nxv4i64 : ValueType<256, 129>; // n x  4 x i64 vector value
-def nxv8i64 : ValueType<512, 130>; // n x  8 x i64 vector value
-def nxv16i64: ValueType<1024,131>; // n x 16 x i64 vector value
-def nxv32i64: ValueType<2048,132>; // n x 32 x i64 vector value
-
-def nxv1f16   : ValueType<32, 133>; // n x   1 x f16 vector value
-def nxv2f16  : ValueType<32 , 134>; // n x  2 x f16 vector value
-def nxv4f16  : ValueType<64 , 135>; // n x  4 x f16 vector value
-def nxv8f16  : ValueType<128, 136>; // n x  8 x f16 vector value
-def nxv16f16  : ValueType<256,137>; // n x  16 x f16 vector value
-def nxv32f16  : ValueType<512,138>; // n x  32 x f16 vector value
-def nxv2bf16 : ValueType<32 , 139>; // n x  2 x bf16 vector value
-def nxv4bf16 : ValueType<64 , 140>; // n x  4 x bf16 vector value
-def nxv8bf16 : ValueType<128, 141>; // n x  8 x bf16 vector value
-def nxv1f32  : ValueType<32 , 142>; // n x  1 x f32 vector value
-def nxv2f32  : ValueType<64 , 143>; // n x  2 x f32 vector value
-def nxv4f32  : ValueType<128, 144>; // n x  4 x f32 vector value
-def nxv8f32  : ValueType<256, 145>; // n x  8 x f32 vector value
-def nxv16f32 : ValueType<512, 146>; // n x 16 x f32 vector value
-def nxv1f64  : ValueType<64,  147>; // n x  1 x f64 vector value
-def nxv2f64  : ValueType<128, 148>; // n x  2 x f64 vector value
-def nxv4f64  : ValueType<256, 149>; // n x  4 x f64 vector value
-def nxv8f64  : ValueType<512, 150>; // n x  8 x f64 vector value
-
-def x86mmx : ValueType<64 , 151>;   // X86 MMX value
-def FlagVT : ValueType<0  , 152>;   // Pre-RA sched glue
-def isVoid : ValueType<0  , 153>;   // Produces no value
-def untyped: ValueType<8  , 154>;   // Produces an untyped value
-def exnref : ValueType<0  , 155>;   // WebAssembly's exnref type
+def v2048i1: ValueType<2048,26>;   //2048 x i1 vector value
+def v4096i1: ValueType<4096,27>;   //4096 x i1 vector value
+
+def v1i8   : ValueType<8,   28>;   //  1 x i8  vector value
+def v2i8   : ValueType<16 , 29>;   //  2 x i8  vector value
+def v4i8   : ValueType<32 , 30>;   //  4 x i8  vector value
+def v8i8   : ValueType<64 , 31>;   //  8 x i8  vector value
+def v16i8  : ValueType<128, 32>;   // 16 x i8  vector value
+def v32i8  : ValueType<256, 33>;   // 32 x i8  vector value
+def v64i8  : ValueType<512, 34>;   // 64 x i8  vector value
+def v128i8 : ValueType<1024,35>;   //128 x i8  vector value
+def v256i8 : ValueType<2048,36>;   //256 x i8  vector value
+def v512i8 : ValueType<4096,37>;   //512 x i8  vector value
+
+def v1i16  : ValueType<16 , 38>;   //  1 x i16 vector value
+def v2i16  : ValueType<32 , 39>;   //  2 x i16 vector value
+def v3i16  : ValueType<48 , 40>;   //  3 x i16 vector value
+def v4i16  : ValueType<64 , 41>;   //  4 x i16 vector value
+def v8i16  : ValueType<128, 42>;   //  8 x i16 vector value
+def v16i16 : ValueType<256, 43>;   // 16 x i16 vector value
+def v32i16 : ValueType<512, 44>;   // 32 x i16 vector value
+def v64i16 : ValueType<1024,45>;   // 64 x i16 vector value
+def v128i16: ValueType<2048,46>;   //128 x i16 vector value
+def v256i16: ValueType<4096,47>;   //256 x i16 vector value
+
+def v1i32    : ValueType<32 , 48>;   //  1 x i32 vector value
+def v2i32    : ValueType<64 , 49>;   //  2 x i32 vector value
+def v3i32    : ValueType<96 , 50>;   //  3 x i32 vector value
+def v4i32    : ValueType<128, 51>;   //  4 x i32 vector value
+def v5i32    : ValueType<160, 52>;   //  5 x i32 vector value
+def v8i32    : ValueType<256, 53>;   //  8 x i32 vector value
+def v16i32   : ValueType<512, 54>;   // 16 x i32 vector value
+def v32i32   : ValueType<1024,55>;   // 32 x i32 vector value
+def v64i32   : ValueType<2048,56>;   // 64 x i32 vector value
+def v128i32  : ValueType<4096,57>;   // 128 x i32 vector value
+def v256i32  : ValueType<8182,58>;   // 256 x i32 vector value
+def v512i32  : ValueType<16384,59>;  // 512 x i32 vector value
+def v1024i32 : ValueType<32768,60>;  // 1024 x i32 vector value
+def v2048i32 : ValueType<65536,61>;  // 2048 x i32 vector value
+
+def v1i64  : ValueType<64 , 62>;   //  1 x i64 vector value
+def v2i64  : ValueType<128, 63>;   //  2 x i64 vector value
+def v4i64  : ValueType<256, 64>;   //  4 x i64 vector value
+def v8i64  : ValueType<512, 65>;   //  8 x i64 vector value
+def v16i64 : ValueType<1024,66>;   // 16 x i64 vector value
+def v32i64 : ValueType<2048,67>;   // 32 x i64 vector value
+
+def v1i128 : ValueType<128, 68>;   //  1 x i128 vector value
+
+def v2f16    : ValueType<32 , 69>;    //    2 x f16 vector value
+def v3f16    : ValueType<48 , 70>;    //    3 x f16 vector value
+def v4f16    : ValueType<64 , 71>;    //    4 x f16 vector value
+def v8f16    : ValueType<128, 72>;    //    8 x f16 vector value
+def v16f16   : ValueType<256, 73>;    //   16 x f16 vector value
+def v32f16   : ValueType<512, 74>;    //   32 x f16 vector value
+def v64f16   : ValueType<1024, 75>;   //   64 x f16 vector value
+def v128f16  : ValueType<2048, 76>;   //  128 x f16 vector value
+def v256f16  : ValueType<4096, 77>;   //  256 x f16 vector value
+def v2bf16   : ValueType<32 , 78>;    //    2 x bf16 vector value
+def v3bf16   : ValueType<48 , 79>;    //    3 x bf16 vector value
+def v4bf16   : ValueType<64 , 80>;    //    4 x bf16 vector value
+def v8bf16   : ValueType<128, 81>;    //    8 x bf16 vector value
+def v16bf16  : ValueType<256, 82>;    //   16 x bf16 vector value
+def v32bf16  : ValueType<512, 83>;    //   32 x bf16 vector value
+def v64bf16  : ValueType<1024, 84>;   //   64 x bf16 vector value
+def v128bf16 : ValueType<2048, 85>;   //  128 x bf16 vector value
+def v1f32    : ValueType<32 , 86>;    //    1 x f32 vector value
+def v2f32    : ValueType<64 , 87>;    //    2 x f32 vector value
+def v3f32    : ValueType<96 , 88>;    //    3 x f32 vector value
+def v4f32    : ValueType<128, 89>;    //    4 x f32 vector value
+def v5f32    : ValueType<160, 90>;    //    5 x f32 vector value
+def v8f32    : ValueType<256, 91>;    //    8 x f32 vector value
+def v16f32   : ValueType<512, 92>;   //   16 x f32 vector value
+def v32f32   : ValueType<1024, 93>;   //   32 x f32 vector value
+def v64f32   : ValueType<2048, 94>;   //   64 x f32 vector value
+def v128f32  : ValueType<4096, 95>;   //  128 x f32 vector value
+def v256f32  : ValueType<8182, 96>;   //  256 x f32 vector value
+def v512f32  : ValueType<16384, 97>;  //  512 x f32 vector value
+def v1024f32 : ValueType<32768, 98>;  // 1024 x f32 vector value
+def v2048f32 : ValueType<65536, 99>;  // 2048 x f32 vector value
+def v1f64    : ValueType<64, 100>;     //    1 x f64 vector value
+def v2f64    : ValueType<128, 101>;    //    2 x f64 vector value
+def v4f64    : ValueType<256, 102>;    //    4 x f64 vector value
+def v8f64    : ValueType<512, 103>;    //    8 x f64 vector value
+def v16f64   : ValueType<1024, 104>;   //   16 x f64 vector value
+def v32f64   : ValueType<2048, 105>;  //   32 x f64 vector value
+
+def nxv1i1  : ValueType<1,  106>;  // n x  1 x i1  vector value
+def nxv2i1  : ValueType<2,  107>;  // n x  2 x i1  vector value
+def nxv4i1  : ValueType<4,  108>;  // n x  4 x i1  vector value
+def nxv8i1  : ValueType<8,  109>;  // n x  8 x i1  vector value
+def nxv16i1 : ValueType<16, 110>;  // n x 16 x i1  vector value
+def nxv32i1 : ValueType<32, 111>;  // n x 32 x i1  vector value
+def nxv64i1  : ValueType<64,112>;  // n x  64 x i1  vector value
+
+def nxv1i8  : ValueType<8,   113>;  // n x  1 x i8  vector value
+def nxv2i8  : ValueType<16,  114>;  // n x  2 x i8  vector value
+def nxv4i8  : ValueType<32,  115>;  // n x  4 x i8  vector value
+def nxv8i8  : ValueType<64,  116>;  // n x  8 x i8  vector value
+def nxv16i8 : ValueType<128, 117>;  // n x 16 x i8  vector value
+def nxv32i8 : ValueType<256, 118>;  // n x 32 x i8  vector value
+def nxv64i8  : ValueType<512,  119>;  // n x  64 x i8  vector value
+
+def nxv1i16 : ValueType<16,  120>; // n x  1 x i16 vector value
+def nxv2i16 : ValueType<32,  121>; // n x  2 x i16 vector value
+def nxv4i16 : ValueType<64,  122>; // n x  4 x i16 vector value
+def nxv8i16 : ValueType<128, 123>; // n x  8 x i16 vector value
+def nxv16i16: ValueType<256, 124>; // n x 16 x i16 vector value
+def nxv32i16: ValueType<512, 125>; // n x 32 x i16 vector value
+
+def nxv1i32 : ValueType<32,  126>; // n x  1 x i32 vector value
+def nxv2i32 : ValueType<64,  127>; // n x  2 x i32 vector value
+def nxv4i32 : ValueType<128, 128>; // n x  4 x i32 vector value
+def nxv8i32 : ValueType<256, 129>; // n x  8 x i32 vector value
+def nxv16i32: ValueType<512, 130>; // n x 16 x i32 vector value
+def nxv32i32: ValueType<1024,131>; // n x 32 x i32 vector value
+
+def nxv1i64 : ValueType<64,  132>; // n x  1 x i64 vector value
+def nxv2i64 : ValueType<128, 133>; // n x  2 x i64 vector value
+def nxv4i64 : ValueType<256, 134>; // n x  4 x i64 vector value
+def nxv8i64 : ValueType<512, 135>; // n x  8 x i64 vector value
+def nxv16i64: ValueType<1024,136>; // n x 16 x i64 vector value
+def nxv32i64: ValueType<2048,137>; // n x 32 x i64 vector value
+
+def nxv1f16   : ValueType<32, 138>; // n x   1 x f16 vector value
+def nxv2f16  : ValueType<32 , 139>; // n x  2 x f16 vector value
+def nxv4f16  : ValueType<64 , 140>; // n x  4 x f16 vector value
+def nxv8f16  : ValueType<128, 141>; // n x  8 x f16 vector value
+def nxv16f16  : ValueType<256,142>; // n x  16 x f16 vector value
+def nxv32f16  : ValueType<512,143>; // n x  32 x f16 vector value
+def nxv2bf16 : ValueType<32 , 144>; // n x  2 x bf16 vector value
+def nxv4bf16 : ValueType<64 , 145>; // n x  4 x bf16 vector value
+def nxv8bf16 : ValueType<128, 146>; // n x  8 x bf16 vector value
+def nxv1f32  : ValueType<32 , 147>; // n x  1 x f32 vector value
+def nxv2f32  : ValueType<64 , 148>; // n x  2 x f32 vector value
+def nxv4f32  : ValueType<128, 149>; // n x  4 x f32 vector value
+def nxv8f32  : ValueType<256, 150>; // n x  8 x f32 vector value
+def nxv16f32 : ValueType<512, 151>; // n x 16 x f32 vector value
+def nxv1f64  : ValueType<64,  152>; // n x  1 x f64 vector value
+def nxv2f64  : ValueType<128, 153>; // n x  2 x f64 vector value
+def nxv4f64  : ValueType<256, 154>; // n x  4 x f64 vector value
+def nxv8f64  : ValueType<512, 155>; // n x  8 x f64 vector value
+
+def x86mmx : ValueType<64 , 156>;   // X86 MMX value
+def FlagVT : ValueType<0  , 157>;   // Pre-RA sched glue
+def isVoid : ValueType<0  , 158>;   // Produces no value
+def untyped: ValueType<8  , 159>;   // Produces an untyped value
+def exnref : ValueType<0  , 160>;   // WebAssembly's exnref type
 
 def token  : ValueType<0  , 248>;   // TokenTy
 def MetadataVT: ValueType<0, 249>;  // Metadata
diff --git llvm/include/llvm/IR/Intrinsics.td llvm/include/llvm/IR/Intrinsics.td
index 4918ea876df..8b4f770625f 100644
--- llvm/include/llvm/IR/Intrinsics.td
+++ llvm/include/llvm/IR/Intrinsics.td
@@ -253,8 +253,11 @@ def llvm_v16i1_ty      : LLVMType<v16i1>;    //  16 x i1
 def llvm_v32i1_ty      : LLVMType<v32i1>;    //  32 x i1
 def llvm_v64i1_ty      : LLVMType<v64i1>;    //  64 x i1
 def llvm_v128i1_ty     : LLVMType<v128i1>;   // 128 x i1
+def llvm_v256i1_ty     : LLVMType<v256i1>;   // 256 x i1
 def llvm_v512i1_ty     : LLVMType<v512i1>;   // 512 x i1
 def llvm_v1024i1_ty    : LLVMType<v1024i1>;  //1024 x i1
+def llvm_v2048i1_ty    : LLVMType<v2048i1>;  //2048 x i1
+def llvm_v4096i1_ty    : LLVMType<v4096i1>;  //4096 x i1
 
 def llvm_v1i8_ty       : LLVMType<v1i8>;     //  1 x i8
 def llvm_v2i8_ty       : LLVMType<v2i8>;     //  2 x i8
@@ -265,6 +268,7 @@ def llvm_v32i8_ty      : LLVMType<v32i8>;    // 32 x i8
 def llvm_v64i8_ty      : LLVMType<v64i8>;    // 64 x i8
 def llvm_v128i8_ty     : LLVMType<v128i8>;   //128 x i8
 def llvm_v256i8_ty     : LLVMType<v256i8>;   //256 x i8
+def llvm_v512i8_ty     : LLVMType<v512i8>;   //512 x i8
 
 def llvm_v1i16_ty      : LLVMType<v1i16>;    //  1 x i16
 def llvm_v2i16_ty      : LLVMType<v2i16>;    //  2 x i16
@@ -274,6 +278,7 @@ def llvm_v16i16_ty     : LLVMType<v16i16>;   // 16 x i16
 def llvm_v32i16_ty     : LLVMType<v32i16>;   // 32 x i16
 def llvm_v64i16_ty     : LLVMType<v64i16>;   // 64 x i16
 def llvm_v128i16_ty    : LLVMType<v128i16>;  //128 x i16
+def llvm_v256i16_ty    : LLVMType<v256i16>;  //256 x i16
 
 def llvm_v1i32_ty      : LLVMType<v1i32>;    //  1 x i32
 def llvm_v2i32_ty      : LLVMType<v2i32>;    //  2 x i32
@@ -282,6 +287,7 @@ def llvm_v8i32_ty      : LLVMType<v8i32>;    //  8 x i32
 def llvm_v16i32_ty     : LLVMType<v16i32>;   // 16 x i32
 def llvm_v32i32_ty     : LLVMType<v32i32>;   // 32 x i32
 def llvm_v64i32_ty     : LLVMType<v64i32>;   // 64 x i32
+def llvm_v128i32_ty    : LLVMType<v128i32>;  //128 x i32
 
 def llvm_v1i64_ty      : LLVMType<v1i64>;    //  1 x i64
 def llvm_v2i64_ty      : LLVMType<v2i64>;    //  2 x i64
@@ -295,6 +301,11 @@ def llvm_v1i128_ty     : LLVMType<v1i128>;   //  1 x i128
 def llvm_v2f16_ty      : LLVMType<v2f16>;    //  2 x half (__fp16)
 def llvm_v4f16_ty      : LLVMType<v4f16>;    //  4 x half (__fp16)
 def llvm_v8f16_ty      : LLVMType<v8f16>;    //  8 x half (__fp16)
+def llvm_v16f16_ty     : LLVMType<v16f16>;   //  16 x half (__fp16)
+def llvm_v32f16_ty     : LLVMType<v32f16>;   //  32 x half (__fp16)
+def llvm_v64f16_ty     : LLVMType<v64f16>;   //  64 x half (__fp16)
+def llvm_v128f16_ty    : LLVMType<v128f16>;  // 128 x half (__fp16)
+def llvm_v256f16_ty    : LLVMType<v256f16>;  // 256 x half (__fp16)
 def llvm_v2bf16_ty     : LLVMType<v2bf16>;   //  2 x bfloat (__bf16)
 def llvm_v4bf16_ty     : LLVMType<v4bf16>;   //  4 x bfloat (__bf16)
 def llvm_v8bf16_ty     : LLVMType<v8bf16>;   //  8 x bfloat (__bf16)
@@ -304,6 +315,8 @@ def llvm_v4f32_ty      : LLVMType<v4f32>;    //  4 x float
 def llvm_v8f32_ty      : LLVMType<v8f32>;    //  8 x float
 def llvm_v16f32_ty     : LLVMType<v16f32>;   // 16 x float
 def llvm_v32f32_ty     : LLVMType<v32f32>;   // 32 x float
+def llvm_v64f32_ty     : LLVMType<v64f32>;   // 64 x float
+def llvm_v128f32_ty    : LLVMType<v128f32>;  //128 x float
 def llvm_v1f64_ty      : LLVMType<v1f64>;    //  1 x double
 def llvm_v2f64_ty      : LLVMType<v2f64>;    //  2 x double
 def llvm_v4f64_ty      : LLVMType<v4f64>;    //  4 x double
diff --git llvm/include/llvm/Support/MachineValueType.h llvm/include/llvm/Support/MachineValueType.h
index 3bb8220e72e..4995c848f1f 100644
--- llvm/include/llvm/Support/MachineValueType.h
+++ llvm/include/llvm/Support/MachineValueType.h
@@ -69,90 +69,95 @@ namespace llvm {
       v256i1         =  23,   //  256 x i1
       v512i1         =  24,   //  512 x i1
       v1024i1        =  25,   // 1024 x i1
-
-      v1i8           =  26,   //  1 x i8
-      v2i8           =  27,   //  2 x i8
-      v4i8           =  28,   //  4 x i8
-      v8i8           =  29,   //  8 x i8
-      v16i8          =  30,   // 16 x i8
-      v32i8          =  31,   // 32 x i8
-      v64i8          =  32,   // 64 x i8
-      v128i8         =  33,   //128 x i8
-      v256i8         =  34,   //256 x i8
-
-      v1i16          =  35,   //  1 x i16
-      v2i16          =  36,   //  2 x i16
-      v3i16          =  37,   //  3 x i16
-      v4i16          =  38,   //  4 x i16
-      v8i16          =  39,   //  8 x i16
-      v16i16         =  40,   // 16 x i16
-      v32i16         =  41,   // 32 x i16
-      v64i16         =  42,   // 64 x i16
-      v128i16        =  43,   //128 x i16
-
-      v1i32          =  44,   //    1 x i32
-      v2i32          =  45,   //    2 x i32
-      v3i32          =  46,   //    3 x i32
-      v4i32          =  47,   //    4 x i32
-      v5i32          =  48,   //    5 x i32
-      v8i32          =  49,   //    8 x i32
-      v16i32         =  50,   //   16 x i32
-      v32i32         =  51,   //   32 x i32
-      v64i32         =  52,   //   64 x i32
-      v128i32        =  53,   //  128 x i32
-      v256i32        =  54,   //  256 x i32
-      v512i32        =  55,   //  512 x i32
-      v1024i32       =  56,   // 1024 x i32
-      v2048i32       =  57,   // 2048 x i32
-
-      v1i64          =  58,   //  1 x i64
-      v2i64          =  59,   //  2 x i64
-      v4i64          =  60,   //  4 x i64
-      v8i64          =  61,   //  8 x i64
-      v16i64         =  62,   // 16 x i64
-      v32i64         =  63,   // 32 x i64
-
-      v1i128         =  64,   //  1 x i128
+      v2048i1        =  26,   // 2048 x i1
+      v4096i1        =  27,   // 4096 x i1
+
+      v1i8           =  28,   //  1 x i8
+      v2i8           =  29,   //  2 x i8
+      v4i8           =  30,   //  4 x i8
+      v8i8           =  31,   //  8 x i8
+      v16i8          =  32,   // 16 x i8
+      v32i8          =  33,   // 32 x i8
+      v64i8          =  34,   // 64 x i8
+      v128i8         =  35,   //128 x i8
+      v256i8         =  36,   //256 x i8
+      v512i8         =  37,   //512 x i8
+
+      v1i16          =  38,   //  1 x i16
+      v2i16          =  39,   //  2 x i16
+      v3i16          =  40,   //  3 x i16
+      v4i16          =  41,   //  4 x i16
+      v8i16          =  42,   //  8 x i16
+      v16i16         =  43,   // 16 x i16
+      v32i16         =  44,   // 32 x i16
+      v64i16         =  45,   // 64 x i16
+      v128i16        =  46,   //128 x i16
+      v256i16        =  47,   //256 x i16
+
+      v1i32          =  48,   //    1 x i32
+      v2i32          =  49,   //    2 x i32
+      v3i32          =  50,   //    3 x i32
+      v4i32          =  51,   //    4 x i32
+      v5i32          =  52,   //    5 x i32
+      v8i32          =  53,   //    8 x i32
+      v16i32         =  54,   //   16 x i32
+      v32i32         =  55,   //   32 x i32
+      v64i32         =  56,   //   64 x i32
+      v128i32        =  57,   //  128 x i32
+      v256i32        =  58,   //  256 x i32
+      v512i32        =  59,   //  512 x i32
+      v1024i32       =  60,   // 1024 x i32
+      v2048i32       =  61,   // 2048 x i32
+
+      v1i64          =  62,   //  1 x i64
+      v2i64          =  63,   //  2 x i64
+      v4i64          =  64,   //  4 x i64
+      v8i64          =  65,   //  8 x i64
+      v16i64         =  66,   // 16 x i64
+      v32i64         =  67,   // 32 x i64
+
+      v1i128         =  68,   //  1 x i128
 
       FIRST_INTEGER_FIXEDLEN_VECTOR_VALUETYPE = v1i1,
       LAST_INTEGER_FIXEDLEN_VECTOR_VALUETYPE = v1i128,
 
-      v2f16          =  65,   //    2 x f16
-      v3f16          =  66,   //    3 x f16
-      v4f16          =  67,   //    4 x f16
-      v8f16          =  68,   //    8 x f16
-      v16f16         =  69,   //   16 x f16
-      v32f16         =  70,   //   32 x f16
-      v64f16         =  71,   //   64 x f16
-      v128f16        =  72,   //  128 x f16
-      v2bf16         =  73,   //    2 x bf16
-      v3bf16         =  74,   //    3 x bf16
-      v4bf16         =  75,   //    4 x bf16
-      v8bf16         =  76,   //    8 x bf16
-      v16bf16        =  77,   //   16 x bf16
-      v32bf16        =  78,   //   32 x bf16
-      v64bf16        =  79,   //   64 x bf16
-      v128bf16       =  80,   //  128 x bf16
-      v1f32          =  81,   //    1 x f32
-      v2f32          =  82,   //    2 x f32
-      v3f32          =  83,   //    3 x f32
-      v4f32          =  84,   //    4 x f32
-      v5f32          =  85,   //    5 x f32
-      v8f32          =  86,   //    8 x f32
-      v16f32         =  87,   //   16 x f32
-      v32f32         =  88,   //   32 x f32
-      v64f32         =  89,   //   64 x f32
-      v128f32        =  90,   //  128 x f32
-      v256f32        =  91,   //  256 x f32
-      v512f32        =  92,   //  512 x f32
-      v1024f32       =  93,   // 1024 x f32
-      v2048f32       =  94,   // 2048 x f32
-      v1f64          =  95,   //    1 x f64
-      v2f64          =  96,   //    2 x f64
-      v4f64          =  97,   //    4 x f64
-      v8f64          =  98,   //    8 x f64
-      v16f64         =  99,   //   16 x f64
-      v32f64         = 100,   //   32 x f64
+      v2f16          =  69,   //    2 x f16
+      v3f16          =  70,   //    3 x f16
+      v4f16          =  71,   //    4 x f16
+      v8f16          =  72,   //    8 x f16
+      v16f16         =  73,   //   16 x f16
+      v32f16         =  74,   //   32 x f16
+      v64f16         =  75,   //   64 x f16
+      v128f16        =  76,   //  128 x f16
+      v256f16        =  77,   //  256 x f16
+      v2bf16         =  78,   //    2 x bf16
+      v3bf16         =  79,   //    3 x bf16
+      v4bf16         =  80,   //    4 x bf16
+      v8bf16         =  81,   //    8 x bf16
+      v16bf16        =  82,   //   16 x bf16
+      v32bf16        =  83,   //   32 x bf16
+      v64bf16        =  84,   //   64 x bf16
+      v128bf16       =  85,   //  128 x bf16
+      v1f32          =  86,   //    1 x f32
+      v2f32          =  87,   //    2 x f32
+      v3f32          =  88,   //    3 x f32
+      v4f32          =  89,   //    4 x f32
+      v5f32          =  90,   //    5 x f32
+      v8f32          =  91,   //    8 x f32
+      v16f32         =  92,   //   16 x f32
+      v32f32         =  93,   //   32 x f32
+      v64f32         =  94,   //   64 x f32
+      v128f32        =  95,   //  128 x f32
+      v256f32        =  96,   //  256 x f32
+      v512f32        =  97,   //  512 x f32
+      v1024f32       =  98,   // 1024 x f32
+      v2048f32       =  99,   // 2048 x f32
+      v1f64          = 100,   //    1 x f64
+      v2f64          = 101,   //    2 x f64
+      v4f64          = 102,   //    4 x f64
+      v8f64          = 103,   //    8 x f64
+      v16f64         = 104,   //   16 x f64
+      v32f64         = 105,   //   32 x f64
 
       FIRST_FP_FIXEDLEN_VECTOR_VALUETYPE = v2f16,
       LAST_FP_FIXEDLEN_VECTOR_VALUETYPE = v32f64,
@@ -160,64 +165,64 @@ namespace llvm {
       FIRST_FIXEDLEN_VECTOR_VALUETYPE = v1i1,
       LAST_FIXEDLEN_VECTOR_VALUETYPE = v32f64,
 
-      nxv1i1         = 101,   // n x  1 x i1
-      nxv2i1         = 102,   // n x  2 x i1
-      nxv4i1         = 103,   // n x  4 x i1
-      nxv8i1         = 104,   // n x  8 x i1
-      nxv16i1        = 105,   // n x 16 x i1
-      nxv32i1        = 106,   // n x 32 x i1
-      nxv64i1        = 107,   // n x  64 x i1
-
-      nxv1i8         = 108,   // n x  1 x i8
-      nxv2i8         = 109,   // n x  2 x i8
-      nxv4i8         = 110,   // n x  4 x i8
-      nxv8i8         = 111,   // n x  8 x i8
-      nxv16i8        = 112,   // n x 16 x i8
-      nxv32i8        = 113,   // n x 32 x i8
-      nxv64i8        = 114,   // n x  64 x i8
-
-      nxv1i16        = 115,  // n x  1 x i16
-      nxv2i16        = 116,  // n x  2 x i16
-      nxv4i16        = 117,  // n x  4 x i16
-      nxv8i16        = 118,  // n x  8 x i16
-      nxv16i16       = 119,  // n x 16 x i16
-      nxv32i16       = 120,  // n x 32 x i16
-
-      nxv1i32        = 121,  // n x  1 x i32
-      nxv2i32        = 122,  // n x  2 x i32
-      nxv4i32        = 123,  // n x  4 x i32
-      nxv8i32        = 124,  // n x  8 x i32
-      nxv16i32       = 125,  // n x 16 x i32
-      nxv32i32       = 126,  // n x 32 x i32
-
-      nxv1i64        = 127,  // n x  1 x i64
-      nxv2i64        = 128,  // n x  2 x i64
-      nxv4i64        = 129,  // n x  4 x i64
-      nxv8i64        = 130,  // n x  8 x i64
-      nxv16i64       = 131,  // n x 16 x i64
-      nxv32i64       = 132,  // n x 32 x i64
+      nxv1i1         = 106,   // n x  1 x i1
+      nxv2i1         = 107,   // n x  2 x i1
+      nxv4i1         = 108,   // n x  4 x i1
+      nxv8i1         = 109,   // n x  8 x i1
+      nxv16i1        = 110,   // n x 16 x i1
+      nxv32i1        = 111,   // n x 32 x i1
+      nxv64i1        = 112,   // n x  64 x i1
+
+      nxv1i8         = 113,   // n x  1 x i8
+      nxv2i8         = 114,   // n x  2 x i8
+      nxv4i8         = 115,   // n x  4 x i8
+      nxv8i8         = 116,   // n x  8 x i8
+      nxv16i8        = 117,   // n x 16 x i8
+      nxv32i8        = 118,   // n x 32 x i8
+      nxv64i8        = 119,   // n x  64 x i8
+
+      nxv1i16        = 120,  // n x  1 x i16
+      nxv2i16        = 121,  // n x  2 x i16
+      nxv4i16        = 122,  // n x  4 x i16
+      nxv8i16        = 123,  // n x  8 x i16
+      nxv16i16       = 124,  // n x 16 x i16
+      nxv32i16       = 125,  // n x 32 x i16
+
+      nxv1i32        = 126,  // n x  1 x i32
+      nxv2i32        = 127,  // n x  2 x i32
+      nxv4i32        = 128,  // n x  4 x i32
+      nxv8i32        = 129,  // n x  8 x i32
+      nxv16i32       = 130,  // n x 16 x i32
+      nxv32i32       = 131,  // n x 32 x i32
+
+      nxv1i64        = 132,  // n x  1 x i64
+      nxv2i64        = 133,  // n x  2 x i64
+      nxv4i64        = 134,  // n x  4 x i64
+      nxv8i64        = 135,  // n x  8 x i64
+      nxv16i64       = 136,  // n x 16 x i64
+      nxv32i64       = 137,  // n x 32 x i64
 
       FIRST_INTEGER_SCALABLE_VECTOR_VALUETYPE = nxv1i1,
       LAST_INTEGER_SCALABLE_VECTOR_VALUETYPE = nxv32i64,
 
-      nxv1f16        = 133,   // n x   1 x f16
-      nxv2f16        = 134,  // n x  2 x f16
-      nxv4f16        = 135,  // n x  4 x f16
-      nxv8f16        = 136,  // n x  8 x f16
-      nxv16f16       = 137,   // n x  16 x f16
-      nxv32f16       = 138,   // n x  32 x f16
-      nxv2bf16       = 139,  // n x  2 x bf16
-      nxv4bf16       = 140,  // n x  4 x bf16
-      nxv8bf16       = 141,  // n x  8 x bf16
-      nxv1f32        = 142,  // n x  1 x f32
-      nxv2f32        = 143,  // n x  2 x f32
-      nxv4f32        = 144,  // n x  4 x f32
-      nxv8f32        = 145,  // n x  8 x f32
-      nxv16f32       = 146,  // n x 16 x f32
-      nxv1f64        = 147,  // n x  1 x f64
-      nxv2f64        = 148,  // n x  2 x f64
-      nxv4f64        = 149,  // n x  4 x f64
-      nxv8f64        = 150,  // n x  8 x f64
+      nxv1f16        = 138,   // n x   1 x f16
+      nxv2f16        = 139,  // n x  2 x f16
+      nxv4f16        = 140,  // n x  4 x f16
+      nxv8f16        = 141,  // n x  8 x f16
+      nxv16f16       = 142,   // n x  16 x f16
+      nxv32f16       = 143,   // n x  32 x f16
+      nxv2bf16       = 144,  // n x  2 x bf16
+      nxv4bf16       = 145,  // n x  4 x bf16
+      nxv8bf16       = 146,  // n x  8 x bf16
+      nxv1f32        = 147,  // n x  1 x f32
+      nxv2f32        = 148,  // n x  2 x f32
+      nxv4f32        = 149,  // n x  4 x f32
+      nxv8f32        = 150,  // n x  8 x f32
+      nxv16f32       = 151,  // n x 16 x f32
+      nxv1f64        = 152,  // n x  1 x f64
+      nxv2f64        = 153,  // n x  2 x f64
+      nxv4f64        = 154,  // n x  4 x f64
+      nxv8f64        = 155,  // n x  8 x f64
 
       FIRST_FP_SCALABLE_VECTOR_VALUETYPE = nxv1f16,
       LAST_FP_SCALABLE_VECTOR_VALUETYPE = nxv8f64,
@@ -228,25 +233,25 @@ namespace llvm {
       FIRST_VECTOR_VALUETYPE = v1i1,
       LAST_VECTOR_VALUETYPE  = nxv8f64,
 
-      x86mmx         = 151,   // This is an X86 MMX value
+      x86mmx         = 156,   // This is an X86 MMX value
 
-      Glue           = 152,   // This glues nodes together during pre-RA sched
+      Glue           = 157,   // This glues nodes together during pre-RA sched
 
-      isVoid         = 153,   // This has no value
+      isVoid         = 158,   // This has no value
 
-      Untyped        = 154,   // This value takes a register, but has
+      Untyped        = 159,   // This value takes a register, but has
                               // unspecified type.  The register class
                               // will be determined by the opcode.
 
-      exnref         = 155,   // WebAssembly's exnref type
+      exnref         = 160,   // WebAssembly's exnref type
 
       FIRST_VALUETYPE =  1,   // This is always the beginning of the list.
-      LAST_VALUETYPE = 156,   // This always remains at the end of the list.
+      LAST_VALUETYPE = 161,   // This always remains at the end of the list.
 
       // This is the current maximum for LAST_VALUETYPE.
       // MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors
       // This value must be a multiple of 32.
-      MAX_ALLOWED_VALUETYPE = 160,
+      MAX_ALLOWED_VALUETYPE = 192,
 
       // A value of type llvm::TokenTy
       token          = 248,
@@ -412,6 +417,12 @@ namespace llvm {
               SimpleTy == MVT::v32f64  || SimpleTy == MVT::v128bf16);
     }
 
+    bool is4096BitVector() const {
+      return (SimpleTy == MVT::v4096i1 || SimpleTy == MVT::v512i8 ||
+	      SimpleTy == MVT::v256i16 || SimpleTy == MVT::v128i32 ||
+	      SimpleTy == MVT::v256f16 || SimpleTy == MVT::v128f32);
+    }
+
     /// Return true if this is an overloaded type for TableGen.
     bool isOverloaded() const {
       return (SimpleTy == MVT::Any || SimpleTy == MVT::iAny ||
@@ -465,6 +476,8 @@ namespace llvm {
       case v256i1:
       case v512i1:
       case v1024i1:
+      case v2048i1:
+      case v4096i1:
       case nxv1i1:
       case nxv2i1:
       case nxv4i1:
@@ -481,6 +494,7 @@ namespace llvm {
       case v64i8:
       case v128i8:
       case v256i8:
+      case v512i8:
       case nxv1i8:
       case nxv2i8:
       case nxv4i8:
@@ -497,6 +511,7 @@ namespace llvm {
       case v32i16:
       case v64i16:
       case v128i16:
+      case v256i16:
       case nxv1i16:
       case nxv2i16:
       case nxv4i16:
@@ -544,6 +559,7 @@ namespace llvm {
       case v32f16:
       case v64f16:
       case v128f16:
+      case v256f16:
       case nxv1f16:
       case nxv2f16:
       case nxv4f16:
@@ -598,15 +614,20 @@ namespace llvm {
       default:
         llvm_unreachable("Not a vector MVT!");
       case v2048i32:
+      case v2048i1:
       case v2048f32: return 2048;
       case v1024i1:
       case v1024i32:
       case v1024f32: return 1024;
+      case v4096i1: return 4096;
       case v512i1:
+      case v512i8:
       case v512i32:
       case v512f32: return 512;
       case v256i1:
       case v256i8:
+      case v256i16:
+      case v256f16:
       case v256i32:
       case v256f32: return 256;
       case v128i1:
@@ -900,6 +921,7 @@ namespace llvm {
       case v16f64: return TypeSize::Fixed(1024);
       case nxv32i32:
       case nxv16i64: return TypeSize::Scalable(1024);
+      case v2048i1:
       case v256i8:
       case v128i16:
       case v64i32:
@@ -909,6 +931,10 @@ namespace llvm {
       case v64f32:
       case v32f64: return TypeSize::Fixed(2048);
       case nxv32i64: return TypeSize::Scalable(2048);
+      case v4096i1:
+      case v512i8:
+      case v256i16:
+      case v256f16:
       case v128i32:
       case v128f32:  return TypeSize::Fixed(4096);
       case v256i32:
@@ -1026,6 +1052,8 @@ namespace llvm {
         if (NumElements == 256)  return MVT::v256i1;
         if (NumElements == 512)  return MVT::v512i1;
         if (NumElements == 1024) return MVT::v1024i1;
+	if (NumElements == 2048) return MVT::v2048i1;
+	if (NumElements == 4096) return MVT::v4096i1;
         break;
       case MVT::i8:
         if (NumElements == 1)   return MVT::v1i8;
@@ -1037,6 +1065,7 @@ namespace llvm {
         if (NumElements == 64)  return MVT::v64i8;
         if (NumElements == 128) return MVT::v128i8;
         if (NumElements == 256) return MVT::v256i8;
+        if (NumElements == 512) return MVT::v512i8;
         break;
       case MVT::i16:
         if (NumElements == 1)   return MVT::v1i16;
@@ -1048,6 +1077,7 @@ namespace llvm {
         if (NumElements == 32)  return MVT::v32i16;
         if (NumElements == 64)  return MVT::v64i16;
         if (NumElements == 128) return MVT::v128i16;
+        if (NumElements == 256) return MVT::v256i16;
         break;
       case MVT::i32:
         if (NumElements == 1)    return MVT::v1i32;
@@ -1085,6 +1115,7 @@ namespace llvm {
         if (NumElements == 32)  return MVT::v32f16;
         if (NumElements == 64)  return MVT::v64f16;
         if (NumElements == 128) return MVT::v128f16;
+        if (NumElements == 256) return MVT::v256f16;
         break;
       case MVT::bf16:
         if (NumElements == 2)   return MVT::v2bf16;
diff --git llvm/lib/CodeGen/ValueTypes.cpp llvm/lib/CodeGen/ValueTypes.cpp
index 66bcdd9b2c4..1b48a4d88b5 100644
--- llvm/lib/CodeGen/ValueTypes.cpp
+++ llvm/lib/CodeGen/ValueTypes.cpp
@@ -216,6 +216,11 @@ Type *EVT::getTypeForEVT(LLVMContext &Context) const {
     return FixedVectorType::get(Type::getInt1Ty(Context), 512);
   case MVT::v1024i1:
     return FixedVectorType::get(Type::getInt1Ty(Context), 1024);
+  case MVT::v2048i1:
+    return FixedVectorType::get(Type::getInt1Ty(Context), 2048);
+  case MVT::v4096i1:
+    return FixedVectorType::get(Type::getInt1Ty(Context), 4096);
+
   case MVT::v1i8:
     return FixedVectorType::get(Type::getInt8Ty(Context), 1);
   case MVT::v2i8:
@@ -234,6 +239,8 @@ Type *EVT::getTypeForEVT(LLVMContext &Context) const {
     return FixedVectorType::get(Type::getInt8Ty(Context), 128);
   case MVT::v256i8:
     return FixedVectorType::get(Type::getInt8Ty(Context), 256);
+  case MVT::v512i8:
+    return FixedVectorType::get(Type::getInt8Ty(Context), 512);
   case MVT::v1i16:
     return FixedVectorType::get(Type::getInt16Ty(Context), 1);
   case MVT::v2i16:
@@ -252,6 +259,8 @@ Type *EVT::getTypeForEVT(LLVMContext &Context) const {
     return FixedVectorType::get(Type::getInt16Ty(Context), 64);
   case MVT::v128i16:
     return FixedVectorType::get(Type::getInt16Ty(Context), 128);
+  case MVT::v256i16:
+    return FixedVectorType::get(Type::getInt16Ty(Context), 256);
   case MVT::v1i32:
     return FixedVectorType::get(Type::getInt32Ty(Context), 1);
   case MVT::v2i32:
@@ -310,6 +319,8 @@ Type *EVT::getTypeForEVT(LLVMContext &Context) const {
     return FixedVectorType::get(Type::getBFloatTy(Context), 64);
   case MVT::v128f16:
     return FixedVectorType::get(Type::getBFloatTy(Context), 128);
+ case MVT::v256f16:
+    return FixedVectorType::get(Type::getBFloatTy(Context), 256);
   case MVT::v2bf16:
     return FixedVectorType::get(Type::getBFloatTy(Context), 2);
   case MVT::v3bf16:
diff --git llvm/lib/IR/Function.cpp llvm/lib/IR/Function.cpp
index 10d535e3ab1..e8f0998c84c 100644
--- llvm/lib/IR/Function.cpp
+++ llvm/lib/IR/Function.cpp
@@ -758,19 +758,22 @@ enum IIT_Info {
   IIT_PTR_TO_ELT = 33,
   IIT_VEC_OF_ANYPTRS_TO_ELT = 34,
   IIT_I128 = 35,
-  IIT_V512 = 36,
-  IIT_V1024 = 37,
-  IIT_STRUCT6 = 38,
-  IIT_STRUCT7 = 39,
-  IIT_STRUCT8 = 40,
-  IIT_F128 = 41,
-  IIT_VEC_ELEMENT = 42,
-  IIT_SCALABLE_VEC = 43,
-  IIT_SUBDIVIDE2_ARG = 44,
-  IIT_SUBDIVIDE4_ARG = 45,
-  IIT_VEC_OF_BITCASTS_TO_INT = 46,
-  IIT_V128 = 47,
-  IIT_BF16 = 48
+  IIT_V128 = 36,
+  IIT_V256 = 37,
+  IIT_V512 = 38,
+  IIT_V1024 = 39,
+  IIT_V2048 = 40,
+  IIT_V4096 = 41,
+  IIT_STRUCT6 = 42,
+  IIT_STRUCT7 = 43,
+  IIT_STRUCT8 = 44,
+  IIT_F128 = 45,
+  IIT_VEC_ELEMENT = 46,
+  IIT_SCALABLE_VEC = 47,
+  IIT_SUBDIVIDE2_ARG = 48,
+  IIT_SUBDIVIDE4_ARG = 49,
+  IIT_VEC_OF_BITCASTS_TO_INT = 50,
+  IIT_BF16 = 51
 };
 
 static void DecodeIITType(unsigned &NextElt, ArrayRef<unsigned char> Infos,
@@ -864,6 +867,10 @@ static void DecodeIITType(unsigned &NextElt, ArrayRef<unsigned char> Infos,
     OutputTable.push_back(IITDescriptor::getVector(128, IsScalableVector));
     DecodeIITType(NextElt, Infos, Info, OutputTable);
     return;
+  case IIT_V256:
+    OutputTable.push_back(IITDescriptor::getVector(256, IsScalableVector));
+    DecodeIITType(NextElt, Infos, Info, OutputTable);
+    return;
   case IIT_V512:
     OutputTable.push_back(IITDescriptor::getVector(512, IsScalableVector));
     DecodeIITType(NextElt, Infos, Info, OutputTable);
@@ -872,6 +879,14 @@ static void DecodeIITType(unsigned &NextElt, ArrayRef<unsigned char> Infos,
     OutputTable.push_back(IITDescriptor::getVector(1024, IsScalableVector));
     DecodeIITType(NextElt, Infos, Info, OutputTable);
     return;
+  case IIT_V2048:
+    OutputTable.push_back(IITDescriptor::getVector(2048, IsScalableVector));
+    DecodeIITType(NextElt, Infos, Info, OutputTable);
+    return;
+  case IIT_V4096:
+    OutputTable.push_back(IITDescriptor::getVector(4096, IsScalableVector));
+    DecodeIITType(NextElt, Infos, Info, OutputTable);
+    return;
   case IIT_PTR:
     OutputTable.push_back(IITDescriptor::get(IITDescriptor::Pointer, 0));
     DecodeIITType(NextElt, Infos, Info, OutputTable);
diff --git llvm/tools/llvm-config/llvm-config.cpp llvm/tools/llvm-config/llvm-config.cpp
index 7e74b7c9081..1428a7fabb1 100644
--- llvm/tools/llvm-config/llvm-config.cpp
+++ llvm/tools/llvm-config/llvm-config.cpp
@@ -239,6 +239,7 @@ Options:\n\
   --shared-mode     Print how the provided components can be collectively linked (`shared` or `static`).\n\
   --link-shared     Link the components as shared libraries.\n\
   --link-static     Link the component libraries statically.\n\
+  --tce-patches     Print list of applied TCE patches.\n\
   --ignore-libllvm  Ignore libLLVM and link component libraries instead.\n\
 Typical components:\n\
   all               All LLVM libraries (default).\n\
@@ -594,6 +595,11 @@ int main(int argc, char **argv) {
         LinkMode = LinkModeShared;
       } else if (Arg == "--link-static") {
         LinkMode = LinkModeStatic;
+      } else if (Arg == "--tce-patches") {
+	OS << "custom-vector-extension-wide" << '\n'
+	   << "tce-and-tcele" << '\n'
+	   << "memcpyoptimizer-only-on-default-as" << '\n'
+	   << "loopidiomrecognize-only-on-default-as" << '\n';
       } else {
         usage();
       }
diff --git llvm/utils/TableGen/CodeGenTarget.cpp llvm/utils/TableGen/CodeGenTarget.cpp
index 891a08ea590..6270092627b 100644
--- llvm/utils/TableGen/CodeGenTarget.cpp
+++ llvm/utils/TableGen/CodeGenTarget.cpp
@@ -86,8 +86,11 @@ StringRef llvm::getEnumName(MVT::SimpleValueType T) {
   case MVT::v32i1:    return "MVT::v32i1";
   case MVT::v64i1:    return "MVT::v64i1";
   case MVT::v128i1:   return "MVT::v128i1";
+  case MVT::v256i1:   return "MVT::v256i1";
   case MVT::v512i1:   return "MVT::v512i1";
   case MVT::v1024i1:  return "MVT::v1024i1";
+  case MVT::v2048i1:  return "MVT::v2048i1";
+  case MVT::v4096i1:  return "MVT::v4096i1";
   case MVT::v1i8:     return "MVT::v1i8";
   case MVT::v2i8:     return "MVT::v2i8";
   case MVT::v4i8:     return "MVT::v4i8";
@@ -97,6 +100,7 @@ StringRef llvm::getEnumName(MVT::SimpleValueType T) {
   case MVT::v64i8:    return "MVT::v64i8";
   case MVT::v128i8:   return "MVT::v128i8";
   case MVT::v256i8:   return "MVT::v256i8";
+  case MVT::v512i8:   return "MVT::v512i8";
   case MVT::v1i16:    return "MVT::v1i16";
   case MVT::v2i16:    return "MVT::v2i16";
   case MVT::v3i16:    return "MVT::v3i16";
@@ -106,6 +110,7 @@ StringRef llvm::getEnumName(MVT::SimpleValueType T) {
   case MVT::v32i16:   return "MVT::v32i16";
   case MVT::v64i16:   return "MVT::v64i16";
   case MVT::v128i16:  return "MVT::v128i16";
+  case MVT::v256i16:  return "MVT::v256i16";
   case MVT::v1i32:    return "MVT::v1i32";
   case MVT::v2i32:    return "MVT::v2i32";
   case MVT::v3i32:    return "MVT::v3i32";
@@ -135,6 +140,7 @@ StringRef llvm::getEnumName(MVT::SimpleValueType T) {
   case MVT::v32f16:   return "MVT::v32f16";
   case MVT::v64f16:   return "MVT::v64f16";
   case MVT::v128f16:  return "MVT::v128f16";
+  case MVT::v256f16:  return "MVT::v256f16";
   case MVT::v2bf16:   return "MVT::v2bf16";
   case MVT::v3bf16:   return "MVT::v3bf16";
   case MVT::v4bf16:   return "MVT::v4bf16";
diff --git llvm/utils/TableGen/IntrinsicEmitter.cpp llvm/utils/TableGen/IntrinsicEmitter.cpp
index 7e419149414..a56ecdd727c 100644
--- llvm/utils/TableGen/IntrinsicEmitter.cpp
+++ llvm/utils/TableGen/IntrinsicEmitter.cpp
@@ -234,19 +234,22 @@ enum IIT_Info {
   IIT_PTR_TO_ELT = 33,
   IIT_VEC_OF_ANYPTRS_TO_ELT = 34,
   IIT_I128 = 35,
-  IIT_V512 = 36,
-  IIT_V1024 = 37,
-  IIT_STRUCT6 = 38,
-  IIT_STRUCT7 = 39,
-  IIT_STRUCT8 = 40,
-  IIT_F128 = 41,
-  IIT_VEC_ELEMENT = 42,
-  IIT_SCALABLE_VEC = 43,
-  IIT_SUBDIVIDE2_ARG = 44,
-  IIT_SUBDIVIDE4_ARG = 45,
-  IIT_VEC_OF_BITCASTS_TO_INT = 46,
-  IIT_V128 = 47,
-  IIT_BF16 = 48
+  IIT_V128 = 36,
+  IIT_V256 = 37,
+  IIT_V512 = 38,
+  IIT_V1024 = 39,
+  IIT_V2048 = 40,
+  IIT_V4096 = 41,
+  IIT_STRUCT6 = 42,
+  IIT_STRUCT7 = 43,
+  IIT_STRUCT8 = 44,
+  IIT_F128 = 45,
+  IIT_VEC_ELEMENT = 46,
+  IIT_SCALABLE_VEC = 47,
+  IIT_SUBDIVIDE2_ARG = 48,
+  IIT_SUBDIVIDE4_ARG = 49,
+  IIT_VEC_OF_BITCASTS_TO_INT = 50,
+  IIT_BF16 = 51
 };
 
 static void EncodeFixedValueType(MVT::SimpleValueType VT,
@@ -384,8 +387,11 @@ static void EncodeFixedType(Record *R, std::vector<unsigned char> &ArgCodes,
     case 32: Sig.push_back(IIT_V32); break;
     case 64: Sig.push_back(IIT_V64); break;
     case 128: Sig.push_back(IIT_V128); break;
+    case 256: Sig.push_back(IIT_V256); break;
     case 512: Sig.push_back(IIT_V512); break;
     case 1024: Sig.push_back(IIT_V1024); break;
+    case 2048: Sig.push_back(IIT_V2048); break;
+    case 4096: Sig.push_back(IIT_V4096); break;
     }
 
     return EncodeFixedValueType(VVT.getVectorElementType().SimpleTy, Sig);
